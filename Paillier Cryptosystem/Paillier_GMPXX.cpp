#include<bits/stdc++.h>
#include <gmpxx.h>

using namespace std;

int main() {
    //Taking Large Prime Numbers
    mpz_class p("656692050181897513638241554199181923922955921760928836766304161790553989228223793461834703506872747071705167995972707253940099469869516422893633358353");
    mpz_class q("204616454475328391399619135615615385636808455963116802820729927402260635621645177248364272093977747839601125961863785073671961509749189348777945178129");
    mpz_class n = p * q;
    mpz_class phi = (p - 1) * (q - 1);//Calculating phi

    mpz_class lambda;
    mpz_class g("13");
    mpz_class r("11");//taking a random number
    mpz_class message("118667788");//Message to be converted

    // Calculating  lambda
    mpz_class x = 0, y = 1;
    mpz_class a = p - 1, b = q - 1;
    while (a != 0) {
        mpz_class q = b / a;
        mpz_class t = a;
        a = b % a;
        b = t;
        t = x;
        x = y - q * x;
        y = t;
    }
    lambda = phi / b;

    // Calculating mu
    mpz_class n1 = n * n;
    mpz_class l, mu;
    mpz_powm(l.get_mpz_t(), g.get_mpz_t(), lambda.get_mpz_t(), n1.get_mpz_t());
    mpz_class t = (l - 1) / n;
    mpz_invert(mu.get_mpz_t(), t.get_mpz_t(), n.get_mpz_t());

    // Public key: (n, g)
    cout << "Public key: (n, g) = (" << n << ", " << g << ")" << endl;

    // Private key: lambda
    cout << "Private key: (lambda,mu) = (" << lambda<<","<<mu <<")"<< endl;

    // Encryption
    mpz_class k1, k2, cipher;
    mpz_powm(k1.get_mpz_t(), g.get_mpz_t(), message.get_mpz_t(), n1.get_mpz_t());
    mpz_powm(k2.get_mpz_t(), r.get_mpz_t(), n.get_mpz_t(), n1.get_mpz_t());
    cipher = (k1 * k2) % n1;
    cout << "Message: " << message << endl;
    cout << "Cipher: " << cipher << endl;

    // Decryption
    mpz_class t1, t2, decrypted;
    mpz_powm(t1.get_mpz_t(), cipher.get_mpz_t(), lambda.get_mpz_t(), n1.get_mpz_t());
    t2 = (t1 - 1) / n;
    decrypted = (t2 * mu) % n;
    cout << "Decrypted Message: " << decrypted << endl;

    // Compare original message with decrypted message
    if (message == decrypted) {
        cout << "Encryption Decryption Successful" << endl;
    } else {
        cout << "Failed" << endl;
    }

    return 0;

    //Sample Output 
    /*
    Public key: (n, g) = (134369998990354300089952937559587535776969448542275036274354877139580565294709571734984987344659981049823868256870131654179172131661304459362060269964715689277572845091035597546151384330800583864761285658157196201892520121435197328538358993082012307467212004716559055867212505767612920427941075061537, 13)
    Private key: (lambda,mu) = (8398124936897143755622058597474220986060590533892189767147179821223785330919348233436561709041248815613991766054383228386198258228831528710128766872740898798307226199124858553521036688827551217939827501160635132043731593536583022364260001092572613284744106922420160221225027799249638416016843532816,23505815949857232168081375076017157650016241457489332077186221334067797948055969182722480292700082454340657649693558926837547716443920529739167599237509858969044179719640757059941175675932965058354089787145393805226435132767424087959754805753489830028466726197710037073261435367045605802275222505926)
    Message: 118667788
    Cipher: 7093685541816586297257335154595231112345185457860234857920896156119618519910137832790111781160879875731314004550126362092917763148348695609277394527768094824385658242943539664605031235876512597204999808403957062794246131952904431046231168753657365093578388119052275991333781713095452116017578355281313906628345134801282273356176042054348601067348432035486212803875654334996836787619413551827643346966348062889273289778297766786583853484555241105114525028483186610090586915001130962728389345670010377218137334432129151533812233649303105810055900768178275762136131330307697058471041428907642726330945
    Decrypted Message: 118667788
    Encryption Decryption Successful
*/
}
